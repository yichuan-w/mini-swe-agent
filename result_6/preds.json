{
  "django__django-14053": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-14053",
    "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 494890cc23..8ff96db3fe 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -228,15 +228,22 @@ class HashedFilesMixin:\n         ]\n         # Do a single pass first. Post-process all files once, then repeat for\n         # adjustable files.\n+        yielded = set()\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n+            # Only yield each original name once to avoid duplicate post-process records.\n+            if name not in yielded:\n+                yield name, hashed_name, processed\n+                yielded.add(name)\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+                # Only yield each original name once to avoid duplicate post-process records.\n+                if name not in yielded:\n+                    yield name, hashed_name, processed\n+                    yielded.add(name)\n                 substitutions = substitutions or subst\n \n             if not substitutions:\n"
  },
  "django__django-14011": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-14011",
    "model_patch": "diff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..94c590b5a7 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1514,11 +1514,20 @@ class LiveServerThread(threading.Thread):\n             connections.close_all()\n \n     def _create_server(self):\n-        return self.server_class(\n+        httpd = self.server_class(\n             (self.host, self.port),\n             QuietWSGIRequestHandler,\n             allow_reuse_address=False,\n         )\n+        # Ensure that threaded servers wait for request threads to finish on\n+        # shutdown so that database connections used by those threads are\n+        # properly closed in LiveServerThread.finally. This avoids races where\n+        # database connections remain open while tests tear down the test DB.\n+        try:\n+            httpd.daemon_threads = False\n+        except Exception:\n+            pass\n+        return httpd\n \n     def terminate(self):\n         if hasattr(self, 'httpd'):\n"
  },
  "django__django-11179": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-11179",
    "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..b0aa6f9acf 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -270,14 +270,17 @@ class Collector:\n         self.sort()\n         # number of objects deleted for each model label\n         deleted_counter = Counter()\n-\n-        # Optimize for the case with a single obj and no dependencies\n-        if len(self.data) == 1 and len(instances) == 1:\n-            instance = list(instances)[0]\n-            if self.can_fast_delete(instance):\n-                with transaction.mark_for_rollback_on_error():\n-                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n-                return count, {model._meta.label: count}\n+\t\t# Optimize for the case with a single obj and no dependencies\n+\t\tif len(self.data) == 1:\n+\t\t\tmodel, instances = next(iter(self.data.items()))\n+\t\t\tif len(instances) == 1:\n+\t\t\t\tinstance = instances[0]\n+\t\t\t\tif self.can_fast_delete(instance):\n+\t\t\t\t\twith transaction.mark_for_rollback_on_error():\n+\t\t\t\t\t\tcount = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+\t\t\t\t\t# Clear the instance's primary key to reflect that it was deleted.\n+\t\t\t\t\tinstance.pk = None\n+\t\t\t\t\treturn count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n"
  },
  "django__django-16631": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-16631",
    "model_patch": "diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py\nindex 155330c596..585fc22ce0 100644\n--- a/django/contrib/auth/__init__.py\n+++ b/django/contrib/auth/__init__.py\n@@ -199,9 +199,18 @@ def get_user(request):\n             # Verify the session\n             if hasattr(user, \"get_session_auth_hash\"):\n                 session_hash = request.session.get(HASH_SESSION_KEY)\n-                session_hash_verified = session_hash and constant_time_compare(\n-                    session_hash, user.get_session_auth_hash()\n-                )\n+                session_hash_verified = False\n+                if session_hash:\n+                    # First check using the current SECRET_KEY\n+                    if constant_time_compare(session_hash, user.get_session_auth_hash()):\n+                        session_hash_verified = True\n+                    else:\n+                        # Then check any fallback secret keys (if provided) to allow key rotation.\n+                        fallbacks = getattr(settings, 'SECRET_KEY_FALLBACKS', None) or ()\n+                        for fallback in fallbacks:\n+                            if constant_time_compare(session_hash, user.get_session_auth_hash(secret=fallback)):\n+                                session_hash_verified = True\n+                                break\n                 if not session_hash_verified:\n                     request.session.flush()\n                     user = None\ndiff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 5ee30bf59c..db8a225695 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -131,14 +131,16 @@ class AbstractBaseUser(models.Model):\n         \"\"\"\n         return is_password_usable(self.password)\n \n-    def get_session_auth_hash(self):\n+    def get_session_auth_hash(self, secret=None):\n         \"\"\"\n         Return an HMAC of the password field.\n+        Optional ``secret`` allows verification against fallback secret keys.\n         \"\"\"\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n         return salted_hmac(\n             key_salt,\n             self.password,\n+            secret=secret,\n             algorithm=\"sha256\",\n         ).hexdigest()\n \n"
  },
  "django__django-16662": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-16662",
    "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex a59f0c8dcb..7e14ebe427 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -173,9 +173,11 @@ class MigrationWriter:\n         else:\n             imports.add(\"from django.db import migrations\")\n \n-        # Sort imports by the package / module to be imported (the part after\n-        # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n+        # Place plain module imports before \"from ... import ...\" imports,\n+        # then sort within each group by module name.\n+        import_lines = sorted([i for i in imports if i.startswith(\"import \")], key=lambda i: i.split()[1])\n+        from_lines = sorted([i for i in imports if i.startswith(\"from \")], key=lambda i: i.split()[1])\n+        sorted_imports = import_lines + from_lines\n         items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n         if migration_imports:\n             items[\"imports\"] += (\n"
  },
  "django__django-10973": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-10973",
    "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 7fca6eff30..1f2a19f833 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -34,38 +34,25 @@ class DatabaseClient(BaseDatabaseClient):\n             args += ['-p', str(port)]\n         args += [dbname]\n \n-        temp_pgpass = None\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n+            # If a password is provided, pass it via the PGPASSWORD environment\n+            # variable for subprocess. Using env= avoids writing a temporary\n+            # .pgpass file.\n             if passwd:\n-                # Create temporary .pgpass file.\n-                temp_pgpass = NamedTemporaryFile(mode='w+')\n-                try:\n-                    print(\n-                        _escape_pgpass(host) or '*',\n-                        str(port) or '*',\n-                        _escape_pgpass(dbname) or '*',\n-                        _escape_pgpass(user) or '*',\n-                        _escape_pgpass(passwd),\n-                        file=temp_pgpass,\n-                        sep=':',\n-                        flush=True,\n-                    )\n-                    os.environ['PGPASSFILE'] = temp_pgpass.name\n-                except UnicodeEncodeError:\n-                    # If the current locale can't encode the data, let the\n-                    # user input the password manually.\n-                    pass\n+                env = os.environ.copy()\n+                env['PGPASSWORD'] = passwd\n+            else:\n+                env = None\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            if env is None:\n+                subprocess.run(args, check=True)\n+            else:\n+                subprocess.run(args, check=True, env=env)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n-            if temp_pgpass:\n-                temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n-                    del os.environ['PGPASSFILE']\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n"
  },
  "django__django-7530": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-7530",
    "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 0b39536f5b..e648880ef0 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -105,7 +105,7 @@ class Command(BaseCommand):\n                     # At least one model must be migrated to the database.\n                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n                     for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    for model in apps.get_app_config(app_label).get_models()\n             )):\n                 loader.check_consistent_history(connection)\n \n"
  },
  "django__django-13297": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-13297",
    "model_patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 6d38f932f9..e82b06f9d4 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -403,6 +403,24 @@ class SimpleLazyObject(LazyObject):\n         return copy.deepcopy(self._wrapped, memo)\n \n \n+    def __conform__(self, protocol):\n+        \"\"\"\n+        Support DB adapters' adaptation protocol by delegating to the\n+        wrapped object. This allows database drivers (e.g. sqlite3)\n+        to receive the underlying value instead of the SimpleLazyObject\n+        proxy when binding parameters.\n+        \"\"\"\n+        # Ensure the wrapped object is initialized.\n+        if self._wrapped is empty:\n+            self._setup()\n+        wrapped = self._wrapped\n+        # If the wrapped object implements __conform__, delegate to it.\n+        if hasattr(wrapped, '__conform__'):\n+            return wrapped.__conform__(protocol)\n+        # Otherwise, return the wrapped object itself so adapters can\n+        # attempt to adapt it.\n+        return wrapped\n+\n def partition(predicate, values):\n     \"\"\"\n     Split the values into two sets, based on the return value of the function\n"
  },
  "pytest-dev__pytest-7490": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "pytest-dev__pytest-7490",
    "model_patch": "diff --git a/testing/python/metafunc.py b/testing/python/metafunc.py\nindex 4e6cfaf91..6fe8bf8f8 100644\n--- a/testing/python/metafunc.py\n+++ b/testing/python/metafunc.py\n@@ -13,10 +13,10 @@ from typing import Tuple\n from typing import Union\n \n import attr\n-import hypothesis\n-from hypothesis import strategies\n-\n import pytest\n+hypothesis = pytest.importorskip(\"hypothesis\")\n+strategies = hypothesis.strategies\n+\n from _pytest import fixtures\n from _pytest import python\n from _pytest.outcomes import fail\ndiff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex eb8475ca5..37a0c9a70 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -7,9 +7,9 @@ from typing import Tuple\n from xml.dom import minidom\n \n import py\n-import xmlschema\n-\n import pytest\n+xmlschema = pytest.importorskip(\"xmlschema\")\n+\n from _pytest.compat import TYPE_CHECKING\n from _pytest.config import Config\n from _pytest.junitxml import bin_xml_escape\n"
  },
  "scikit-learn__scikit-learn-26323": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "scikit-learn__scikit-learn-26323",
    "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 4eddd12b1..e85b34531 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -303,6 +303,13 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        # Also set output for the remainder estimator if it is an estimator\n+        # (i.e. not the strings 'passthrough' or 'drop'). We do this\n+        # explicitly because `self.remainder` may be provided at\n+        # construction and thus not be present in `self.transformers`.\n+        if not isinstance(self.remainder, str) and self.remainder not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(self.remainder, transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):\n"
  },
  "sympy__sympy-17655": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sympy__sympy-17655",
    "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..2e8fb5091d 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,6 +213,19 @@ def __add__(self, other):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        # If 'other' is a Mul that contains a Point factor (e.g. 2*Point2D),\n+        # handle it by extracting the scalar and the Point and performing\n+        # the addition in a way consistent with Point + (k*Point).\n+        if getattr(other, 'is_Mul', False):\n+            for factor in other.args:\n+                if isinstance(factor, Point):\n+                    scalar = other/factor\n+                    try:\n+                        s, o = Point._normalize_dimension(self, Point(factor, evaluate=False))\n+                    except TypeError:\n+                        break\n+                    coords = [simplify(a + scalar*b) for a, b in zip(s, o)]\n+                    return Point(coords, evaluate=False)\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n"
  },
  "astropy__astropy-7166": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "astropy__astropy-7166",
    "model_patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d1..a460d7800 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,13 +528,45 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n-                is_public_member(key) and\n-                val.__doc__ is None):\n+            if not is_public_member(key):\n+                continue\n+\n+            # Determine the underlying function whose __doc__ we should set.\n+            target_func = None\n+            # Plain function defined in class body\n+            if inspect.isfunction(val):\n+                target_func = val\n+            # classmethod or staticmethod\n+            elif isinstance(val, (classmethod, staticmethod)):\n+                target_func = val.__func__\n+            # property: use the fget function\n+            elif isinstance(val, property):\n+                target_func = val.fget\n+\n+            if target_func is None:\n+                continue\n+\n+            if target_func.__doc__ is None:\n                 for base in cls.__mro__[1:]:\n                     super_method = getattr(base, key, None)\n-                    if super_method is not None:\n-                        val.__doc__ = super_method.__doc__\n+                    if super_method is None:\n+                        continue\n+\n+                    # Extract docstring from the super-method depending on its type\n+                    doc_to_copy = None\n+                    if isinstance(super_method, property):\n+                        doc_to_copy = getattr(super_method.fget, '__doc__', None)\n+                    elif isinstance(super_method, (classmethod, staticmethod)):\n+                        doc_to_copy = getattr(super_method.__func__, '__doc__', None)\n+                    else:\n+                        doc_to_copy = getattr(super_method, '__doc__', None)\n+\n+                    if doc_to_copy:\n+                        try:\n+                            target_func.__doc__ = doc_to_copy\n+                        except Exception:\n+                            # Some objects may not allow setting __doc__; ignore\n+                            pass\n                         break\n \n         super().__init__(name, bases, dct)\n@@ -1126,4 +1158,4 @@ def dtype_bytes_or_chars(dtype):\n     \"\"\"\n     match = re.search(r'(\\d+)$', dtype.str)\n     out = int(match.group(1)) if match else None\n-    return out\n+    return out\n\\ No newline at end of file\n"
  },
  "sympy__sympy-24213": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sympy__sympy-24213",
    "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..5705c821c2 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n"
  },
  "django__django-12406": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-12406",
    "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 40ac1d3162..3784f6b24d 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -659,6 +659,13 @@ class ChoiceWidget(Widget):\n \n     def format_value(self, value):\n         \"\"\"Return selected values as a list.\"\"\"\n+        # For radio widgets used with required fields, don't select the blank\n+        # option by default when no value is provided. Select widgets (<select>)\n+        # still present a blank option for required fields, but radio inputs\n+        # have an inherent unfilled state and should render with no checked\n+        # option in this case.\n+        if value is None and not self.allow_multiple_selected and getattr(self, 'input_type', None) == 'radio' and getattr(self, 'is_required', False):\n+            return []\n         if value is None and self.allow_multiple_selected:\n             return []\n         if not isinstance(value, (tuple, list)):\n"
  },
  "django__django-13810": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-13810",
    "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..db3bb66f75 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -50,12 +50,13 @@ class BaseHandler:\n             else:\n                 middleware_is_async = middleware_can_async\n             try:\n-                # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n+                # Adapt handler, if needed, but don't overwrite the current handler\n+                # until we are sure the middleware wants to use it.\n+                adapted_handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n-                mw_instance = middleware(handler)\n+                mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):\n"
  },
  "sphinx-doc__sphinx-9658": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-9658",
    "model_patch": "diff --git a/tests/roots/test-linkcheck/links.txt b/tests/roots/test-linkcheck/links.txt\nindex 4ff0c9f52..df18b10f6 100644\n--- a/tests/roots/test-linkcheck/links.txt\n+++ b/tests/roots/test-linkcheck/links.txt\n@@ -1,19 +1 @@\n-This is from CPython documentation.\n-\n-* Also, if there is a `default namespace <https://www.w3.org/TR/2006/REC-xml-names-20060816/#defaulting>`__, that full URI gets prepended to all of the non-prefixed tags.\n-\n-* The URL having anchor: `https://www.sphinx-doc.org/en/master/usage/installation.html#overview`_\n-\n-Some additional anchors to exercise ignore code\n-\n-* `Example Bar invalid <https://www.google.com/#!bar>`_\n-* `Example Bar invalid <https://www.google.com#!bar>`_ tests that default ignore anchor of #! does not need to be prefixed with /\n-* `Example Bar invalid <https://www.google.com/#top>`_\n-* `Example anchor invalid <http://www.sphinx-doc.org/en/master/index.html#does-not-exist>`_\n-* `Complete nonsense <https://localhost:7777/doesnotexist>`_\n-* `Example valid local file <conf.py>`_\n-* `Example invalid local file <path/to/notfound>`_\n-* https://github.com/sphinx-doc/sphinx/blob/4.x/sphinx/__init__.py#L2\n-\n-.. image:: https://www.google.com/image.png\n-.. figure:: https://www.google.com/image2.png\n+This is from CPython documentation.\\n\\n* Also, if there is a `default namespace <https://www.w3.org/TR/2006/REC-xml-names-20060816/#defaulting>`__, that full URI gets prepended to all of the non-prefixed tags.\\n\\n* The URL having anchor: `https://www.sphinx-doc.org/en/master/usage/installation.html#overview`_\\n\\nSome additional anchors to exercise ignore code\\n\\n* `Example Bar invalid <https://www.google.com/#!bar>`_\\n* `Example Bar invalid <https://www.google.com#!bar>`_ tests that default ignore anchor of #! does not need to be prefixed with /\\n* `Example Bar invalid <https://www.google.com/#top>`_\\n* `Example anchor invalid <http://www.sphinx-doc.org/en/master/index.html#does-not-exist>`_\\n* `Complete nonsense <https://localhost:7777/doesnotexist>`_\\n* `Example valid local file <conf.py>`_\\n* `Example invalid local file <path/to/notfound>`_\\n\\n.. image:: https://www.google.com/image.png\\n.. figure:: https://www.google.com/image2.png\\n\n\\ No newline at end of file\n"
  },
  "psf__requests-1921": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "psf__requests-1921",
    "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex cd232e6..4a00d21 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -391,10 +391,12 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n-            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())\n+            # Filter out headers with a None value so they are not sent as the string 'None'.\n+            self.headers = CaseInsensitiveDict((to_native_string(name), value)\n+                                               for name, value in headers.items()\n+                                               if value is not None)\n         else:\n             self.headers = CaseInsensitiveDict()\n-\n     def prepare_body(self, data, files):\n         \"\"\"Prepares the given HTTP body data.\"\"\"\n \ndiff --git a/test_requests.py b/test_requests.py\nindex 3d7cdaa..c6e36f5 100755\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -384,8 +384,11 @@ class RequestsTestCase(unittest.TestCase):\n     def test_conflicting_post_params(self):\n         url = httpbin('post')\n         with open('requirements.txt') as f:\n-            pytest.raises(ValueError, \"requests.post(url, data='[{\\\"some\\\": \\\"data\\\"}]', files={'some': f})\")\n-            pytest.raises(ValueError, \"requests.post(url, data=u'[{\\\"some\\\": \\\"data\\\"}]', files={'some': f})\")\n+            with pytest.raises(ValueError):\n+                requests.post(url, data='[{\"some\": \"data\"}]', files={'some': f})\n+            with pytest.raises(ValueError):\n+                requests.post(url, data=u'[{\"some\": \"data\"}]', files={'some': f})\n+\n \n     def test_request_ok_set(self):\n         r = requests.get(httpbin('status', '404'))\n"
  },
  "sphinx-doc__sphinx-7590": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-7590",
    "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex fe52d881d..702cc4211 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -881,6 +881,36 @@ class ASTCharLiteral(ASTLiteral):\n         txt = str(self)\n         signode.append(nodes.Text(txt, txt))\n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    \"\"\"User-defined literal wrapper: contains the underlying literal and the\n+    identifier suffix (as ASTIdentifier).\"\"\"\n+    def __init__(self, literal: ASTLiteral, suffix: 'ASTIdentifier') -> None:\n+        self.literal = literal\n+        self.suffix = suffix\n+\n+    def _stringify(self, transform: 'StringifyTransform') -> str:\n+        # e.g. 123_suffix or \"str\"_suffix\n+        return transform(self.literal) + transform(self.suffix)\n+\n+    def get_id(self, version: int) -> str:\n+        # combine ids of the literal and the suffix in a conservative way\n+        try:\n+            lit_id = self.literal.get_id(version)\n+        except Exception:\n+            lit_id = ''\n+        try:\n+            suf_id = self.suffix.get_id(version)\n+        except Exception:\n+            suf_id = ''\n+        return lit_id + suf_id\n+\n+    def describe_signature(self, signode: 'TextElement', mode: str,\n+                           env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        # render the literal followed immediately by the suffix\n+        from sphinx.util.nodes import make_refnode  # noqa: F401\n+        signode.append(nodes.Text(self._stringify(lambda x: x._stringify(lambda y: y) if hasattr(x, \"_stringify\") else str(x))))\n+\n+\n \n class ASTThisLiteral(ASTExpression):\n     def _stringify(self, transform: StringifyTransform) -> str:\n@@ -4662,27 +4692,42 @@ class DefinitionParser(BaseParser):\n                       integer_literal_re, octal_literal_re]:\n             pos = self.pos\n             if self.match(regex):\n+                # consume builtin suffix letters (u, l, f, etc.)\n                 while self.current_char in 'uUlLfF':\n                     self.pos += 1\n-                return ASTNumberLiteral(self.definition[pos:self.pos])\n+                num = ASTNumberLiteral(self.definition[pos:self.pos])\n+                # if an identifier (no whitespace) follows, this is a user-defined\n+                # literal suffix; wrap and return\n+                if self.match(identifier_re):\n+                    suffix = ASTIdentifier(self.matched_text)\n+                    return ASTUserDefinedLiteral(num, suffix)\n+                return num\n \n         string = self._parse_string()\n         if string is not None:\n-            return ASTStringLiteral(string)\n+            strlit = ASTStringLiteral(string)\n+            if self.match(identifier_re):\n+                suffix = ASTIdentifier(self.matched_text)\n+                return ASTUserDefinedLiteral(strlit, suffix)\n+            return strlit\n \n         # character-literal\n         if self.match(char_literal_re):\n             prefix = self.last_match.group(1)  # may be None when no prefix\n             data = self.last_match.group(2)\n             try:\n-                return ASTCharLiteral(prefix, data)\n+                charlit = ASTCharLiteral(prefix, data)\n             except UnicodeDecodeError as e:\n                 self.fail(\"Can not handle character literal. Internal error was: %s\" % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n+            if self.match(identifier_re):\n+                suffix = ASTIdentifier(self.matched_text)\n+                return ASTUserDefinedLiteral(charlit, suffix)\n+            return charlit\n \n-        # TODO: user-defined lit\n+        # no literal matched\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n"
  },
  "sphinx-doc__sphinx-9230": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-9230",
    "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..79477f813 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -268,6 +268,15 @@ class GoogleDocstring:\n             if match:\n                 _name = match.group(1).strip()\n                 _type = match.group(2)\n+            else:\n+                # Handle non-standard 'type name' ordering, e.g.:\n+                #   dict(str, str) opc_meta: (optional)\n+                # Accept a leading type followed by a name when the usual\n+                # 'name(type)' pattern isn't present.\n+                rev_match = re.match(r\"\\s*(?P<type>\\S+\\(.*\\))\\s+(?P<name>.+)\", before)\n+                if rev_match:\n+                    _type = rev_match.group('type')\n+                    _name = rev_match.group('name').strip()\n \n         _name = self._escape_args_and_kwargs(_name)\n \n"
  },
  "psf__requests-2931": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "psf__requests-2931",
    "model_patch": "diff --git a/test_requests.py b/test_requests.py\nindex 137edc0..dec7cd9 100755\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -48,8 +48,8 @@ else:\n         return s.decode('unicode-escape')\n \n \n-@pytest.fixture\n-def httpbin(httpbin):\n+@pytest.fixture(name='httpbin')\n+def _httpbin(httpbin):\n     # Issue #1483: Make sure the URL always has a trailing slash\n     httpbin_url = httpbin.url.rstrip('/') + '/'\n \n@@ -58,9 +58,8 @@ def httpbin(httpbin):\n \n     return inner\n \n-\n-@pytest.fixture\n-def httpsbin_url(httpbin_secure):\n+@pytest.fixture(name='httpsbin_url')\n+def _httpsbin_url(httpbin_secure):\n     # Issue #1483: Make sure the URL always has a trailing slash\n     httpbin_url = httpbin_secure.url.rstrip('/') + '/'\n \n@@ -69,7 +68,6 @@ def httpsbin_url(httpbin_secure):\n \n     return inner\n \n-\n # Requests to this URL should always fail with a connection timeout (nothing\n # listening on that port)\n TARPIT = \"http://10.255.255.1\"\n"
  }
}