2025-10-03 02:13:11,847 - INFO - Creating container for django__django-10973...
2025-10-03 02:13:11,915 - INFO - Container for django__django-10973 created: 59d0bcb9074b6e471b2fb0079e89e3f53353cbea608ae0c73f38abb32ae88215
2025-10-03 02:13:12,094 - INFO - Container for django__django-10973 started: 59d0bcb9074b6e471b2fb0079e89e3f53353cbea608ae0c73f38abb32ae88215
2025-10-03 02:13:12,095 - INFO - Intermediate patch for django__django-10973 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/django__django-10973/patch.diff, now applying to container...
2025-10-03 02:13:12,269 - INFO - >>>>> Applied Patch:
Checking patch django/db/backends/postgresql/client.py...
Applied patch django/db/backends/postgresql/client.py cleanly.

2025-10-03 02:13:12,951 - INFO - Git diff before:
diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..5ffa05bd8f 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -2,7 +2,6 @@ import os
 import signal
 import subprocess
 
-from django.core.files.temp import NamedTemporaryFile
 from django.db.backends.base.client import BaseDatabaseClient
 
 
@@ -34,38 +33,26 @@ class DatabaseClient(BaseDatabaseClient):
             args += ['-p', str(port)]
         args += [dbname]
 
-        temp_pgpass = None
         sigint_handler = signal.getsignal(signal.SIGINT)
+        env = None
         try:
             if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
+                # Use PGPASSWORD environment variable instead of a temporary .pgpass file.
                 try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
+                    env = os.environ.copy()
+                    env['PGPASSWORD'] = passwd
                 except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
+                    # If the current locale can't encode the password, let psql prompt the user.
+                    env = None
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            if env is not None:
+                subprocess.run(args, env=env, check=True)
+            else:
+                subprocess.run(args, check=True)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)
-            if temp_pgpass:
-                temp_pgpass.close()
-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
-                    del os.environ['PGPASSFILE']
 
     def runshell(self):
         DatabaseClient.runshell_db(self.connection.get_connection_params())
2025-10-03 02:13:12,951 - INFO - Eval script for django__django-10973 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/django__django-10973/eval.sh; copying to container...
2025-10-03 02:13:21,091 - INFO - Test runtime: 8.08 seconds
2025-10-03 02:13:21,091 - INFO - Test output for django__django-10973 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/django__django-10973/test_output.txt
2025-10-03 02:13:21,150 - INFO - Git diff after:
diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..5ffa05bd8f 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -2,7 +2,6 @@ import os
 import signal
 import subprocess
 
-from django.core.files.temp import NamedTemporaryFile
 from django.db.backends.base.client import BaseDatabaseClient
 
 
@@ -34,38 +33,26 @@ class DatabaseClient(BaseDatabaseClient):
             args += ['-p', str(port)]
         args += [dbname]
 
-        temp_pgpass = None
         sigint_handler = signal.getsignal(signal.SIGINT)
+        env = None
         try:
             if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
+                # Use PGPASSWORD environment variable instead of a temporary .pgpass file.
                 try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
+                    env = os.environ.copy()
+                    env['PGPASSWORD'] = passwd
                 except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
+                    # If the current locale can't encode the password, let psql prompt the user.
+                    env = None
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            if env is not None:
+                subprocess.run(args, env=env, check=True)
+            else:
+                subprocess.run(args, check=True)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)
-            if temp_pgpass:
-                temp_pgpass.close()
-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
-                    del os.environ['PGPASSFILE']
 
     def runshell(self):
         DatabaseClient.runshell_db(self.connection.get_connection_params())
2025-10-03 02:13:21,150 - INFO - Grading answer for django__django-10973...
2025-10-03 02:13:21,150 - INFO - report: {'django__django-10973': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['test_accent (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)', 'test_basic (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)', 'test_column (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)', 'test_nopass (dbshell.test_postgresql.PostgreSqlDbshellCommandTestCase)', 'SIGINT is ignored in Python and passed to psql to abort quries.'], 'failure': []}, 'PASS_TO_PASS': {'success': [], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-10973: resolved: True
2025-10-03 02:13:21,151 - INFO - Attempting to stop container sweb.eval.django__django-10973.my_evaluation_run...
2025-10-03 02:13:36,332 - INFO - Attempting to remove container sweb.eval.django__django-10973.my_evaluation_run...
2025-10-03 02:13:36,352 - INFO - Container sweb.eval.django__django-10973.my_evaluation_run removed.
