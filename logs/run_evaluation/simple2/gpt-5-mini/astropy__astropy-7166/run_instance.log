2025-10-03 06:03:15,335 - INFO - Creating container for astropy__astropy-7166...
2025-10-03 06:03:15,474 - INFO - Container for astropy__astropy-7166 created: c17e10738d62b517957b08c8b9175b72352dd959dbed694cf05bb1b48ec58c2e
2025-10-03 06:03:16,002 - INFO - Container for astropy__astropy-7166 started: c17e10738d62b517957b08c8b9175b72352dd959dbed694cf05bb1b48ec58c2e
2025-10-03 06:03:16,004 - INFO - Intermediate patch for astropy__astropy-7166 written to logs/run_evaluation/simple2/gpt-5-mini/astropy__astropy-7166/patch.diff, now applying to container...
2025-10-03 06:03:16,108 - INFO - >>>>> Applied Patch:
Checking patch astropy/utils/misc.py...
Applied patch astropy/utils/misc.py cleanly.

2025-10-03 06:03:16,504 - INFO - Git diff before:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..a460d7800 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,13 +528,45 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
+            if not is_public_member(key):
+                continue
+
+            # Determine the underlying function whose __doc__ we should set.
+            target_func = None
+            # Plain function defined in class body
+            if inspect.isfunction(val):
+                target_func = val
+            # classmethod or staticmethod
+            elif isinstance(val, (classmethod, staticmethod)):
+                target_func = val.__func__
+            # property: use the fget function
+            elif isinstance(val, property):
+                target_func = val.fget
+
+            if target_func is None:
+                continue
+
+            if target_func.__doc__ is None:
                 for base in cls.__mro__[1:]:
                     super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
+                    if super_method is None:
+                        continue
+
+                    # Extract docstring from the super-method depending on its type
+                    doc_to_copy = None
+                    if isinstance(super_method, property):
+                        doc_to_copy = getattr(super_method.fget, '__doc__', None)
+                    elif isinstance(super_method, (classmethod, staticmethod)):
+                        doc_to_copy = getattr(super_method.__func__, '__doc__', None)
+                    else:
+                        doc_to_copy = getattr(super_method, '__doc__', None)
+
+                    if doc_to_copy:
+                        try:
+                            target_func.__doc__ = doc_to_copy
+                        except Exception:
+                            # Some objects may not allow setting __doc__; ignore
+                            pass
                         break
 
         super().__init__(name, bases, dct)
@@ -1126,4 +1158,4 @@ def dtype_bytes_or_chars(dtype):
     """
     match = re.search(r'(\d+)$', dtype.str)
     out = int(match.group(1)) if match else None
-    return out
+    return out
\ No newline at end of file
2025-10-03 06:03:16,504 - INFO - Eval script for astropy__astropy-7166 written to logs/run_evaluation/simple2/gpt-5-mini/astropy__astropy-7166/eval.sh; copying to container...
2025-10-03 06:03:21,301 - INFO - Test runtime: 4.75 seconds
2025-10-03 06:03:21,301 - INFO - Test output for astropy__astropy-7166 written to logs/run_evaluation/simple2/gpt-5-mini/astropy__astropy-7166/test_output.txt
2025-10-03 06:03:21,365 - INFO - Git diff after:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..a460d7800 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,13 +528,45 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
+            if not is_public_member(key):
+                continue
+
+            # Determine the underlying function whose __doc__ we should set.
+            target_func = None
+            # Plain function defined in class body
+            if inspect.isfunction(val):
+                target_func = val
+            # classmethod or staticmethod
+            elif isinstance(val, (classmethod, staticmethod)):
+                target_func = val.__func__
+            # property: use the fget function
+            elif isinstance(val, property):
+                target_func = val.fget
+
+            if target_func is None:
+                continue
+
+            if target_func.__doc__ is None:
                 for base in cls.__mro__[1:]:
                     super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
+                    if super_method is None:
+                        continue
+
+                    # Extract docstring from the super-method depending on its type
+                    doc_to_copy = None
+                    if isinstance(super_method, property):
+                        doc_to_copy = getattr(super_method.fget, '__doc__', None)
+                    elif isinstance(super_method, (classmethod, staticmethod)):
+                        doc_to_copy = getattr(super_method.__func__, '__doc__', None)
+                    else:
+                        doc_to_copy = getattr(super_method, '__doc__', None)
+
+                    if doc_to_copy:
+                        try:
+                            target_func.__doc__ = doc_to_copy
+                        except Exception:
+                            # Some objects may not allow setting __doc__; ignore
+                            pass
                         break
 
         super().__init__(name, bases, dct)
@@ -1126,4 +1158,4 @@ def dtype_bytes_or_chars(dtype):
     """
     match = re.search(r'(\d+)$', dtype.str)
     out = int(match.group(1)) if match else None
-    return out
+    return out
\ No newline at end of file
2025-10-03 06:03:21,365 - INFO - Grading answer for astropy__astropy-7166...
2025-10-03 06:03:21,366 - INFO - report: {'astropy__astropy-7166': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['astropy/utils/tests/test_misc.py::test_inherit_docstrings']}, 'PASS_TO_PASS': {'success': ['astropy/utils/tests/test_misc.py::test_isiterable', 'astropy/utils/tests/test_misc.py::test_signal_number_to_name_no_failure', 'astropy/utils/tests/test_misc.py::test_skip_hidden', 'astropy/utils/tests/test_misc.py::test_JsonCustomEncoder', 'astropy/utils/tests/test_misc.py::test_check_broadcast', 'astropy/utils/tests/test_misc.py::test_dtype_bytes_or_chars'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for astropy__astropy-7166: resolved: False
2025-10-03 06:03:21,367 - INFO - Attempting to stop container sweb.eval.astropy__astropy-7166.simple2...
2025-10-03 06:03:36,603 - INFO - Attempting to remove container sweb.eval.astropy__astropy-7166.simple2...
2025-10-03 06:03:36,614 - INFO - Container sweb.eval.astropy__astropy-7166.simple2 removed.
