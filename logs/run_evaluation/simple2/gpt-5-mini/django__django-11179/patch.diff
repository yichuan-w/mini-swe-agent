diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..b0aa6f9acf 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -270,14 +270,17 @@ class Collector:
         self.sort()
         # number of objects deleted for each model label
         deleted_counter = Counter()
-
-        # Optimize for the case with a single obj and no dependencies
-        if len(self.data) == 1 and len(instances) == 1:
-            instance = list(instances)[0]
-            if self.can_fast_delete(instance):
-                with transaction.mark_for_rollback_on_error():
-                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
-                return count, {model._meta.label: count}
+		# Optimize for the case with a single obj and no dependencies
+		if len(self.data) == 1:
+			model, instances = next(iter(self.data.items()))
+			if len(instances) == 1:
+				instance = instances[0]
+				if self.can_fast_delete(instance):
+					with transaction.mark_for_rollback_on_error():
+						count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+					# Clear the instance's primary key to reflect that it was deleted.
+					instance.pk = None
+					return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):
             # send pre_delete signals
