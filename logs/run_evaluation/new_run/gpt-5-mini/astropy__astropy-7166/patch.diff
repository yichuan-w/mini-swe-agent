diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..890cfbfd1 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -527,18 +527,48 @@ class InheritDocstrings(type):
                  and len(key) > 4) or
                 not key.startswith('_'))
 
+        def _get_underlying_func(obj):
+            """
+            Return the underlying function object for descriptors like
+            function, classmethod, staticmethod, and property.  Returns
+            None if no underlying function can be determined.
+            """
+            if inspect.isfunction(obj):
+                return obj
+            # classmethod and staticmethod wrap the function in __func__
+            if isinstance(obj, (classmethod, staticmethod)):
+                return getattr(obj, "__func__", None)
+            # property exposes the fget function
+            if isinstance(obj, property):
+                return obj.fget
+            return None
+
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
+            # Try to find the underlying function for the attribute in the new
+            # class dict.  If there isn't one, skip (e.g., plain data attributes).
+            target_func = _get_underlying_func(val)
+            if (target_func is None or
+                    not is_public_member(key) or
+                    target_func.__doc__ is not None):
+                continue
 
-        super().__init__(name, bases, dct)
+            # Walk the MRO to find a docstring from a base class attribute.
+            for base in cls.__mro__[1:]:
+                super_attr = getattr(base, key, None)
+                if super_attr is None:
+                    continue
+
+                super_func = _get_underlying_func(super_attr)
+                if super_func is not None and super_func.__doc__ is not None:
+                    target_func.__doc__ = super_func.__doc__
+                    break
+                # Fallback: if the attribute itself has a __doc__ (e.g., some
+                # descriptors on classes), use that.
+                if getattr(super_attr, "__doc__", None) is not None:
+                    target_func.__doc__ = super_attr.__doc__
+                    break
 
+        super().__init__(name, bases, dct)
 
 class OrderedDescriptor(metaclass=abc.ABCMeta):
     """
