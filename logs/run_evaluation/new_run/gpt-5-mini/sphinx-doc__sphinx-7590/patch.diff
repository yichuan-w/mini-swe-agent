diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..2b4e99395 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -4662,16 +4662,31 @@ class DefinitionParser(BaseParser):
                       integer_literal_re, octal_literal_re]:
             pos = self.pos
             if self.match(regex):
-                while self.current_char in 'uUlLfF':
+                # consume builtin suffix letters (uUlLfF)
+                while not self.eof and self.current_char in 'uUlLfF':
                     self.pos += 1
+                # If a user-defined literal suffix (identifier) follows, include it.
+                # Accept identifier_re as suffix for UDLs (e.g., 42_km, 1q_s).
+                # We don't need to treat numeric UDLs specially here â€” keep the
+                # token as a numeric literal text.
+                if self.match(identifier_re):
+                    return ASTNumberLiteral(self.definition[pos:self.pos])
                 return ASTNumberLiteral(self.definition[pos:self.pos])
 
         string = self._parse_string()
         if string is not None:
+            # string literal may be followed by a user-defined literal suffix
+            if self.match(identifier_re):
+                string = string + self.matched_text
             return ASTStringLiteral(string)
 
         # character-literal
+        pos = self.pos
         if self.match(char_literal_re):
+            # If a user-defined literal suffix follows a character literal,
+            # return a fallback expression containing the whole token (char+suffix).
+            if self.match(identifier_re):
+                return ASTFallbackExpr(self.definition[pos:self.pos])
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
             try:
@@ -4682,9 +4697,8 @@ class DefinitionParser(BaseParser):
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
 
-        # TODO: user-defined lit
+        # No literal parsed
         return None
-
     def _parse_fold_or_paren_expression(self) -> ASTExpression:
         # "(" expression ")"
         # fold-expression
